1) et User Details:
   - User name: Give a descriptive name, for example, terraform-admin.
   - Click Next.
   Set Permissions:
   - Choose Attach policies directly.
   - From the list of permission policies, search for and check AdministratorAccess.
   - Click Next.
   Note: For this project, AdministratorAccess will make it easier
    for us to access all AWS services. However, in a real work environment, you should apply
     the Principle of Least Privilege (only grant the minimum permissions required for a given task).

--------------------------------------------------------------------------------------------------------------------------------------

🧠 1. Why We Use the Access Key & Secret Key

👉 These keys are like “programmatic credentials” that allow tools (Terraform, AWS CLI, SDKs, etc.) to act on your AWS account without logging in through the web.

Access Key ID → like a username

Secret Access Key → like a password

Terraform uses these keys to authenticate itself to AWS whenever it tries to:

Create a VPC

Launch EC2 instances

Create RDS databases

Manage IAM, S3, etc.

🔐 Without these keys, Terraform has no way to “prove” to AWS who is making the request → AWS rejects the operation.

⚡ Example

If you run:

terraform apply


Terraform will do something like:

“Hey AWS, please create a VPC in region eu-west-3.”

AWS replies:

“Who are you? Where are your credentials?”

Terraform includes the Access Key ID & Secret Key in the API call headers.
AWS checks the IAM user associated with the keys, verifies permissions, and if valid:

“✅ Okay, VPC created.




--------------------------------------------------------------------------------------------------------------------------------------


single_nat_gateway = true

By default, Terraform can create one NAT Gateway per availability zone for high availability.

Setting single_nat_gateway = true tells Terraform to create only one NAT Gateway and share it across all private subnets.
✅ Purpose:

Save cost — only one NAT Gateway (billed hourly) instead of multiple.

⚠️ Trade-off:
If that one NAT Gateway fails or the AZ it’s in goes down, all private subnets lose internet access.

💡 Use in learning/testing → ✅
💡 Use in production → ❌ (better to have one NAT per AZ)



--------------------------------------------------------------------------------------------------------------------------------------



vpc-cni (AWS VPC CNI Plugin)

Kubernetes concept: Networking for Pods.

Problem it solves: In Kubernetes, each Pod needs an IP address to communicate with other Pods or AWS resources.

How it works:

Allocates IP addresses from your VPC subnets directly to Pods.

Ensures Pods can talk to each other and to services outside the cluster.

Without it: Pods might not be reachable, and network traffic may fail.

Analogy: Think of each Pod as a house. vpc-cni gives each house a proper street address (IP) so others can find it.



coredns

Kubernetes concept: Internal DNS server.

Problem it solves: Pods often need to talk to services inside the cluster by name (like my-service.default.svc.cluster.local).

How it works:

Runs as a Deployment inside the cluster.

Resolves service names to Pod IPs automatically.

Without it: Services can’t discover each other; Pods would need hard-coded IPs.

Analogy: CoreDNS is like a phone book for your cluster. Without it, Pods can’t “call” each other by name.